import React, { useState } from 'react';
import { FileText, Code, BookOpen, Clock, Copy, Activity, Download, ChevronDown, ChevronUp } from 'lucide-react';

const AutoDocstrings = () => {
  const [repo, setRepo] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedDocs, setGeneratedDocs] = useState([]);
  const [stats, setStats] = useState({ totalFiles: 0, docsGenerated: 0, linesDocumented: 0 });
  const [error, setError] = useState('');
  const [expandedSections, setExpandedSections] = useState({});
  const API_BASE_URL = 'http://localhost:5000';

  const handleGenerateDocs = async () => {
    if (!repo.trim() || !repo.includes('/')) {
      setError('Please enter a valid repository in format: owner/repo');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await fetch(`${API_BASE_URL}/api/execute/4`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ repo: repo.trim() })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate documentation');
      }

      const data = await response.json();
      if (data.result && data.result.docs) {
        const newDocs = data.result.docs.map(doc => ({
          id: Date.now() + Math.random(),
          ...doc,
          timestamp: new Date().toISOString(),
          status: doc.status || 'completed'
        }));
        setGeneratedDocs(prev => [...newDocs, ...prev]);
        setStats({
          totalFiles: newDocs.length,
          docsGenerated: newDocs.filter(doc => doc.status === 'completed').length,
          linesDocumented: newDocs.reduce((acc, doc) => acc + doc.linesCount, 0)
        });
      } else if (data.result && data.result.error) {
        throw new Error(data.result.error);
      } else {
        throw new Error('Unexpected response format');
      }
    } catch (err) {
      setError(err.message || 'Failed to generate documentation');
    } finally {
      setIsLoading(false);
    }
  };

  const getLanguageColor = (language) => {
    switch (language.toLowerCase()) {
      case 'python': return 'text-blue-400 bg-blue-400/10 border-blue-400/20';
      case 'javascript': return 'text-yellow-400 bg-yellow-400/10 border-yellow-400/20';
      case 'typescript': return 'text-blue-500 bg-blue-500/10 border-blue-500/20';
      case 'image': return 'text-purple-400 bg-purple-400/10 border-purple-400/20';
      default: return 'text-slate-400 bg-slate-400/10 border-slate-400/20';
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const downloadDocsAsPDF = () => {
    const latexContent = generateLatexContent(generatedDocs, repo);
    const blob = new Blob([latexContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${repo.replace('/', '_')}_documentation.tex`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateLatexContent = (docs, repo) => {
    return `
\\documentclass{article}
\\usepackage[utf8]{inputenc}
\\usepackage{geometry}
\\geometry{a4paper, margin=1in}
\\usepackage{listings}
\\usepackage{xcolor}
\\usepackage{titling}
\\usepackage{fontspec}
\\setmainfont{DejaVu Sans}

\\lstset{
  basicstyle=\\ttfamily\\small,
  breaklines=true,
  frame=single,
  backgroundcolor=\\color{gray!10},
  keywordstyle=\\color{blue},
  commentstyle=\\color{gray},
  stringstyle=\\color{purple}
}

\\title{Documentation for ${repo}}
\\author{Auto-generated by Grok}
\\date{${new Date().toLocaleDateString()}}

\\begin{document}

\\maketitle
\\tableofcontents
\\newpage

${docs.map(doc => `
\\section{${doc.filename}}
\\label{sec:${doc.path.replace(/[\/.]/g, '_')}}

\\subsection{Purpose}
${doc.documentation.split('## Purpose')[1]?.split('## ')[0]?.trim() || 'No purpose provided'}

\\subsection{Main Components}
${doc.functions.length ? doc.functions.map(func => `
\\subsubsection{${func.name}}
Description: ${func.description}
${func.example ? `
\\paragraph{Example}
\\begin{lstlisting}
${func.example}
\\end{lstlisting}
` : ''}
`).join('\n') : 'None'}

\\subsection{Usage Examples}
${doc.documentation.split('## Usage Examples')[1]?.split('## ')[0]?.trim() || 'No usage examples provided'}

\\subsection{Dependencies}
${doc.documentation.split('## Dependencies')[1]?.split('## ')[0]?.trim() || 'None'}

\\subsection{Developer Notes}
${doc.documentation.split('## Developer Notes')[1]?.split('## ')[0]?.trim() || 'None'}

`).join('\n')}

\\end{document}
`;
  };

  const toggleSection = (docId, section) => {
    setExpandedSections(prev => ({
      ...prev,
      [`${docId}-${section}`]: !prev[`${docId}-${section}`]
    }));
  };

  const renderDocumentation = (doc) => {
    const sections = [
      { title: 'Purpose', content: doc.documentation.split('## Purpose')[1]?.split('## ')[0]?.trim() || 'No purpose provided' },
      { title: 'Usage Examples', content: doc.documentation.split('## Usage Examples')[1]?.split('## ')[0]?.trim() || 'No usage examples provided' },
      { title: 'Dependencies', content: doc.documentation.split('## Dependencies')[1]?.split('## ')[0]?.trim() || 'None' },
      { title: 'Developer Notes', content: doc.documentation.split('## Developer Notes')[1]?.split('## ')[0]?.trim() || 'None' }
    ];

    return sections.map((section, index) => {
      const isExpanded = expandedSections[`${doc.id}-${section.title}`];
      const isCodeSection = section.title === 'Usage Examples' && section.content.includes('```');
      let formattedContent = section.content;

      // Extract code blocks for syntax highlighting
      if (isCodeSection) {
        const codeMatch = section.content.match(/```(\w+)?\n([\s\S]*?)```/);
        if (codeMatch) {
          const [, language, code] = codeMatch;
          formattedContent = (
            <div className="bg-slate-800/60 rounded-lg p-3">
              <div className="flex items-center justify-between mb-2">
                <span className="text-xs font-semibold text-slate-400">{language || 'Code'}</span>
              </div>
              <code className="text-sm text-slate-300 font-mono block whitespace-pre-wrap">{code.trim()}</code>
            </div>
          );
        }
      }

      return (
        <div key={index} className="mb-4 border-b border-slate-700/30 pb-4 last:border-b-0">
          <button
            className="flex items-center w-full text-lg font-semibold text-slate-300 mb-2 hover:text-purple-400 transition-colors duration-200"
            onClick={() => toggleSection(doc.id, section.title)}
          >
            {isExpanded ? <ChevronUp className="w-5 h-5 mr-2" /> : <ChevronDown className="w-5 h-5 mr-2" />}
            {section.title}
          </button>
          {isExpanded && (
            <div className="bg-slate-900/30 rounded-lg p-4">
              {isCodeSection && typeof formattedContent !== 'string' ? (
                formattedContent
              ) : (
                <p className="text-slate-300 text-sm leading-relaxed">{formattedContent}</p>
              )}
            </div>
          )}
        </div>
      );
    });
  };

  return (
    <div className="fixed top-0 right-0 bottom-0 left-72 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white overflow-y-auto">
      <div className="absolute inset-0 opacity-20">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-blue-500/10 to-teal-500/10 animate-pulse"></div>
        <div className="absolute top-0 left-0 w-96 h-96 bg-gradient-to-br from-purple-500/5 to-blue-500/5 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-br from-blue-500/5 to-teal-500/5 rounded-full blur-3xl"></div>
      </div>

      <div className="relative bg-slate-800/60 backdrop-blur-xl border-b border-slate-700/50 shadow-2xl">
        <div className="px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="bg-gradient-to-br from-purple-500 via-blue-500 to-teal-500 p-4 rounded-2xl shadow-lg ring-1 ring-white/10">
                <BookOpen className="w-10 h-10 text-white drop-shadow-lg" />
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-teal-400 bg-clip-text text-transparent drop-shadow-sm">
                  Auto Docstrings
                </h1>
                <p className="text-slate-400 mt-2 text-lg font-medium">Comprehensive documentation for your codebase</p>
              </div>
            </div>
            <div className="flex items-center space-x-8">
              <div className="flex items-center space-x-6 text-sm">
                <div className="flex items-center space-x-3 bg-slate-700/50 px-4 py-2 rounded-xl backdrop-blur-sm">
                  <FileText className="w-5 h-5 text-purple-400" />
                  <span className="text-slate-200 font-medium">{stats.totalFiles}</span>
                  <span className="text-slate-400">Files</span>
                </div>
                <div className="flex items-center space-x-3 bg-slate-700/50 px-4 py-2 rounded-xl backdrop-blur-sm">
                  <BookOpen className="w-5 h-5 text-blue-400" />
                  <span className="text-slate-200 font-medium">{stats.docsGenerated}</span>
                  <span className="text-slate-400">Docs</span>
                </div>
                <div className="flex items-center space-x-3 bg-slate-700/50 px-4 py-2 rounded-xl backdrop-blur-sm">
                  <Activity className="w-5 h-5 text-teal-400" />
                  <span className="text-slate-200 font-medium">{stats.linesDocumented}</span>
                  <span className="text-slate-400">Lines</span>
                </div>
              </div>
              <button
                onClick={downloadDocsAsPDF}
                disabled={!generatedDocs.length}
                className="bg-gradient-to-r from-blue-600 to-teal-600 hover:from-blue-700 hover:to-teal-700 disabled:from-slate-600 disabled:to-slate-600 text-white font-semibold py-3 px-6 rounded-xl transition-all duration-300 flex items-center space-x-2 shadow-lg ring-1 ring-white/10 hover:shadow-xl hover:scale-105 disabled:hover:scale-100"
              >
                <Download className="w-5 h-5" />
                <span>Download PDF</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="relative px-8 py-8">
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 p-8 mb-10 shadow-2xl ring-1 ring-white/5">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div>
              <label className="block text-sm font-semibold text-slate-300 mb-3">
                Repository
              </label>
              <div className="relative group">
                <FileText className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400 group-focus-within:text-purple-400 transition-colors" />
                <input
                  type="text"
                  value={repo}
                  onChange={(e) => setRepo(e.target.value)}
                  placeholder="owner/repository"
                  className="w-full bg-slate-700/50 border border-slate-600/50 rounded-2xl px-12 py-4 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 transition-all duration-300 backdrop-blur-sm"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-semibold text-slate-300 mb-3">
                Action
              </label>
              <button
                onClick={handleGenerateDocs}
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-purple-600 via-blue-600 to-teal-600 hover:from-purple-700 hover:via-blue-700 hover:to-teal-700 disabled:from-slate-600 disabled:to-slate-600 text-white font-semibold py-4 px-8 rounded-2xl transition-all duration-300 flex items-center justify-center space-x-3 shadow-xl ring-1 ring-white/10 hover:shadow-2xl hover:scale-105 disabled:hover:scale-100"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                    <span>Generating Documentation...</span>
                  </>
                ) : (
                  <>
                    <BookOpen className="w-5 h-5" />
                    <span>Generate Documentation</span>
                  </>
                )}
              </button>
            </div>
          </div>
          {error && (
            <div className="mt-4 bg-red-500/20 border border-red-500/50 rounded-xl p-4 text-red-300">
              {error}
            </div>
          )}
        </div>

        <div className="space-y-8">
          {generatedDocs.map((doc) => (
            <div key={doc.id} className="bg-slate-800/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 overflow-hidden shadow-2xl ring-1 ring-white/5 hover:ring-white/10 transition-all duration-300">
              <div className="p-8 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-700/30">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-5">
                    <div className="bg-gradient-to-br from-purple-500 to-blue-600 p-3 rounded-2xl shadow-lg ring-1 ring-white/10">
                      <FileText className="w-7 h-7 text-white" />
                    </div>
                    <div>
                      <h3 className="text-2xl font-bold text-white mb-2">
                        {doc.filename}
                      </h3>
                      <div className="flex items-center space-x-6 text-sm text-slate-400">
                        <span className="flex items-center space-x-2 bg-slate-700/50 px-3 py-1 rounded-lg">
                          <Clock className="w-4 h-4" />
                          <span>{new Date(doc.timestamp).toLocaleString()}</span>
                        </span>
                        <span className={`px-3 py-1 rounded-lg text-sm font-semibold border ${getLanguageColor(doc.language)}`}>
                          {doc.language}
                        </span>
                        <span className="flex items-center space-x-2 bg-slate-700/50 px-3 py-1 rounded-lg">
                          <Code className="w-4 h-4" />
                          <span>{doc.linesCount} lines</span>
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => copyToClipboard(doc.documentation)}
                      className="bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white p-3 rounded-xl transition-all duration-300 flex items-center space-x-2"
                      title="Copy documentation"
                    >
                      <Copy className="w-5 h-5" />
                    </button>
                    <span className={`px-4 py-2 rounded-xl text-sm font-semibold border ${doc.status === 'completed' ? 'bg-emerald-400/20 text-emerald-400 border-emerald-400/30' : 'bg-red-400/20 text-red-400 border-red-400/30'}`}>
                      {doc.status}
                    </span>
                  </div>
                </div>
              </div>
              <div className="p-8 border-b border-slate-700/50 bg-slate-800/30">
                <h4 className="text-lg font-semibold text-slate-300 mb-4 flex items-center space-x-2">
                  <Code className="w-5 h-5 text-yellow-400" />
                  <span>Main Components</span>
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {doc.functions.length ? (
                    doc.functions.map((func, index) => (
                      <div key={index} className="bg-slate-700/30 rounded-2xl p-4 border border-slate-600/30 backdrop-blur-sm">
                        <div className="flex items-center space-x-3 mb-2">
                          <div className="bg-purple-500/20 p-2 rounded-lg">
                            <Code className="w-4 h-4 text-purple-400" />
                          </div>
                          <span className="font-mono text-purple-300 font-semibold">{func.name}</span>
                        </div>
                        <p className="text-slate-400 text-sm mb-2">{func.description}</p>
                        {func.example && (
                          <div className="bg-slate-800/60 rounded-lg p-2">
                            <code className="text-xs text-slate-300 font-mono">{func.example}</code>
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <p className="text-slate-400 text-sm">None</p>
                  )}
                </div>
              </div>
              <div className="p-8">
                <div className="flex items-center justify-between mb-6">
                  <h4 className="text-lg font-semibold text-slate-300 flex items-center space-x-2">
                    <BookOpen className="w-5 h-5 text-blue-400" />
                    <span>Generated Documentation</span>
                  </h4>
                </div>
                <div className="bg-slate-900/50 rounded-2xl p-6 border border-slate-600/30 backdrop-blur-sm">
                  {renderDocumentation(doc)}
                </div>
              </div>
            </div>
          ))}
          {generatedDocs.length === 0 && !isLoading && (
            <div className="text-center py-16">
              <div className="bg-slate-800/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 p-12 shadow-2xl ring-1 ring-white/5">
                <div className="bg-gradient-to-br from-purple-500/20 to-blue-500/20 p-6 rounded-3xl w-24 h-24 mx-auto mb-6 flex items-center justify-center">
                  <BookOpen className="w-12 h-12 text-blue-400" />
                </div>
                <h3 className="text-2xl font-bold text-slate-300 mb-3">No Documentation Generated Yet</h3>
                <p className="text-slate-400 text-lg">Enter a repository above to start generating comprehensive documentation for your codebase.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AutoDocstrings;