import React, { useState, useEffect } from 'react';
import { Search, Shield, FileText, AlertTriangle, CheckCircle, Clock, Eye, Code, Zap, AlertCircle, GitBranch, Users, Activity, Lock, Bug, Database, Server } from 'lucide-react';

const VulnerabilityScanner = () => {
  const [repo, setRepo] = useState('');
  const [scanMode, setScanMode] = useState('recent'); // 'recent', 'specific', 'full'
  const [prNumber, setPrNumber] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [scans, setScans] = useState([]);
  const [currentScan, setCurrentScan] = useState(null);
  const [stats, setStats] = useState({ totalScans: 0, filesScanned: 0, vulnerabilities: 0, criticalIssues: 0 });

  // Mock vulnerability data
  const mockScans = [
    {
      id: 1,
      prNumber: 142,
      title: "Add authentication middleware",
      files: [
        {
          filename: "src/middleware/auth.js",
          linesScanned: 45,
          vulnerabilities: [
            { 
              severity: "Critical", 
              type: "SQL Injection",
              description: "Potential SQL injection vulnerability in user authentication query",
              line: "const query = `SELECT * FROM users WHERE email = '${email}'`",
              remediation: "Use parameterized queries or prepared statements to prevent SQL injection"
            },
            { 
              severity: "High", 
              type: "Authentication Bypass",
              description: "Missing token validation allows potential authentication bypass",
              line: "if (token) { // proceed without validation }",
              remediation: "Implement proper JWT token validation and signature verification"
            },
            { 
              severity: "Medium", 
              type: "Information Disclosure",
              description: "Sensitive error information exposed in response",
              line: "res.status(500).json({ error: err.stack })",
              remediation: "Log detailed errors server-side, return generic error messages to client"
            }
          ],
          riskScore: 8.5
        },
        {
          filename: "src/routes/api.js",
          linesScanned: 28,
          vulnerabilities: [
            { 
              severity: "High", 
              type: "XSS Vulnerability",
              description: "User input rendered without sanitization",
              line: "res.send(`<h1>Welcome ${req.body.name}</h1>`)",
              remediation: "Sanitize user input and use template engines with auto-escaping"
            }
          ],
          riskScore: 6.2
        }
      ],
      status: "completed",
      timestamp: new Date().toISOString(),
      overallRisk: "High"
    },
    {
      id: 2,
      prNumber: 141,
      title: "Database connection optimization",
      files: [
        {
          filename: "src/database/connection.js",
          linesScanned: 67,
          vulnerabilities: [
            { 
              severity: "Critical", 
              type: "Hardcoded Credentials",
              description: "Database credentials hardcoded in source code",
              line: "const password = 'admin123'",
              remediation: "Use environment variables or secure credential management systems"
            },
            { 
              severity: "Medium", 
              type: "Insecure Connection",
              description: "Database connection not using SSL/TLS encryption",
              line: "ssl: false",
              remediation: "Enable SSL/TLS encryption for database connections"
            }
          ],
          riskScore: 9.1
        }
      ],
      status: "completed",
      timestamp: new Date(Date.now() - 3600000).toISOString(),
      overallRisk: "Critical"
    }
  ];

  useEffect(() => {
    setScans(mockScans);
    const totalVulns = mockScans.reduce((acc, scan) => 
      acc + scan.files.reduce((fileAcc, file) => fileAcc + file.vulnerabilities.length, 0), 0);
    const criticalCount = mockScans.reduce((acc, scan) => 
      acc + scan.files.reduce((fileAcc, file) => 
        fileAcc + file.vulnerabilities.filter(v => v.severity === 'Critical').length, 0), 0);
    
    setStats({
      totalScans: mockScans.length,
      filesScanned: mockScans.reduce((acc, scan) => acc + scan.files.length, 0),
      vulnerabilities: totalVulns,
      criticalIssues: criticalCount
    });
  }, []);

  const handleScan = async () => {
    if (!repo.trim() || !repo.includes('/')) {
      alert('Please enter a valid repository in format: owner/repo');
      return;
    }

    setIsLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      if (scanMode === 'specific' && prNumber) {
        const newScan = {
          id: Date.now(),
          prNumber: parseInt(prNumber),
          title: `Security Scan PR #${prNumber}`,
          files: [{
            filename: "example.js",
            linesScanned: Math.floor(Math.random() * 100) + 20,
            vulnerabilities: [
              { 
                severity: "High", 
                type: "Input Validation",
                description: "Missing input validation on user-provided data",
                line: "const userId = req.params.id",
                remediation: "Implement proper input validation and sanitization"
              }
            ],
            riskScore: Math.random() * 10
          }],
          status: "completed",
          timestamp: new Date().toISOString(),
          overallRisk: "Medium"
        };
        setScans(prev => [newScan, ...prev]);
        setCurrentScan(newScan);
      }
      setIsLoading(false);
    }, 3000);
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'Critical': return <AlertTriangle className="w-4 h-4 text-red-400" />;
      case 'High': return <AlertCircle className="w-4 h-4 text-orange-400" />;
      case 'Medium': return <AlertTriangle className="w-4 h-4 text-amber-400" />;
      case 'Low': return <CheckCircle className="w-4 h-4 text-yellow-400" />;
      default: return <CheckCircle className="w-4 h-4 text-emerald-400" />;
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical': return 'text-red-400 bg-red-400/10 border-red-400/20';
      case 'High': return 'text-orange-400 bg-orange-400/10 border-orange-400/20';
      case 'Medium': return 'text-amber-400 bg-amber-400/10 border-amber-400/20';
      case 'Low': return 'text-yellow-400 bg-yellow-400/10 border-yellow-400/20';
      default: return 'text-emerald-400 bg-emerald-400/10 border-emerald-400/20';
    }
  };

  const getRiskColor = (risk) => {
    switch (risk) {
      case 'Critical': return 'text-red-400 bg-red-400/10 border-red-400/30 animate-pulse';
      case 'High': return 'text-orange-400 bg-orange-400/10 border-orange-400/30';
      case 'Medium': return 'text-amber-400 bg-amber-400/10 border-amber-400/30';
      case 'Low': return 'text-emerald-400 bg-emerald-400/10 border-emerald-400/30';
      default: return 'text-slate-400 bg-slate-400/10 border-slate-400/30';
    }
  };

  const getVulnerabilityTypeIcon = (type) => {
    switch (type) {
      case 'SQL Injection': return <Database className="w-4 h-4" />;
      case 'XSS Vulnerability': return <Code className="w-4 h-4" />;
      case 'Authentication Bypass': return <Lock className="w-4 h-4" />;
      case 'Hardcoded Credentials': return <Shield className="w-4 h-4" />;
      case 'Insecure Connection': return <Server className="w-4 h-4" />;
      default: return <Bug className="w-4 h-4" />;
    }
  };

  return (
    <div className="fixed top-0 right-0 bottom-0 left-72 bg-gradient-to-br from-slate-900 via-red-950/20 to-slate-900 text-white overflow-y-auto">
      {/* Animated Background Pattern */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute inset-0 bg-gradient-to-r from-red-500/10 via-orange-500/10 to-amber-500/10 animate-pulse"></div>
        <div className="absolute top-0 left-0 w-96 h-96 bg-gradient-to-br from-red-500/5 to-orange-500/5 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-br from-orange-500/5 to-amber-500/5 rounded-full blur-3xl"></div>
      </div>

      {/* Header */}
      <div className="relative bg-slate-800/60 backdrop-blur-xl border-b border-slate-700/50 shadow-2xl">
        <div className="px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="bg-gradient-to-br from-red-500 via-orange-500 to-amber-500 p-4 rounded-2xl shadow-lg ring-1 ring-white/10">
                <Shield className="w-10 h-10 text-white drop-shadow-lg" />
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-red-400 via-orange-400 to-amber-400 bg-clip-text text-transparent drop-shadow-sm">
                  Vulnerability Scanner
                </h1>
                <p className="text-slate-400 mt-2 text-lg font-medium">AI-powered security analysis for your codebase</p>
              </div>
            </div>
            <div className="flex items-center space-x-8">
              <div className="flex items-center space-x-6 text-sm">
                <div className="flex items-center space-x-3 bg-slate-700/50 px-4 py-2 rounded-xl backdrop-blur-sm">
                  <Eye className="w-5 h-5 text-blue-400" />
                  <span className="text-slate-200 font-medium">{stats.totalScans}</span>
                  <span className="text-slate-400">Scans</span>
                </div>
                <div className="flex items-center space-x-3 bg-slate-700/50 px-4 py-2 rounded-xl backdrop-blur-sm">
                  <FileText className="w-5 h-5 text-teal-400" />
                  <span className="text-slate-200 font-medium">{stats.filesScanned}</span>
                  <span className="text-slate-400">Files</span>
                </div>
                <div className="flex items-center space-x-3 bg-slate-700/50 px-4 py-2 rounded-xl backdrop-blur-sm">
                  <AlertTriangle className="w-5 h-5 text-amber-400" />
                  <span className="text-slate-200 font-medium">{stats.vulnerabilities}</span>
                  <span className="text-slate-400">Issues</span>
                </div>
                <div className="flex items-center space-x-3 bg-red-900/50 px-4 py-2 rounded-xl backdrop-blur-sm border border-red-500/30">
                  <AlertCircle className="w-5 h-5 text-red-400" />
                  <span className="text-red-200 font-medium">{stats.criticalIssues}</span>
                  <span className="text-red-300">Critical</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="relative px-8 py-8">
        {/* Control Panel */}
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 p-8 mb-10 shadow-2xl ring-1 ring-white/5">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Repository Input */}
            <div>
              <label className="block text-sm font-semibold text-slate-300 mb-3">
                Repository
              </label>
              <div className="relative group">
                <GitBranch className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400 group-focus-within:text-orange-400 transition-colors" />
                <input
                  type="text"
                  value={repo}
                  onChange={(e) => setRepo(e.target.value)}
                  placeholder="owner/repository"
                  className="w-full bg-slate-700/50 border border-slate-600/50 rounded-2xl px-12 py-4 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500/50 focus:border-orange-500/50 transition-all duration-300 backdrop-blur-sm"
                />
              </div>
            </div>

            {/* Scan Mode */}
            <div>
              <label className="block text-sm font-semibold text-slate-300 mb-3">
                Scan Mode
              </label>
              <select
                value={scanMode}
                onChange={(e) => setScanMode(e.target.value)}
                className="w-full bg-slate-700/50 border border-slate-600/50 rounded-2xl px-5 py-4 text-white focus:outline-none focus:ring-2 focus:ring-orange-500/50 focus:border-orange-500/50 transition-all duration-300 backdrop-blur-sm"
              >
                <option value="recent">Recent PR</option>
                <option value="specific">Specific PR</option>
                <option value="full">Full Repository</option>
              </select>
            </div>

            {/* PR Number (conditional) */}
            <div>
              <label className="block text-sm font-semibold text-slate-300 mb-3">
                {scanMode === 'specific' ? 'PR Number' : 'Action'}
              </label>
              {scanMode === 'specific' ? (
                <input
                  type="number"
                  value={prNumber}
                  onChange={(e) => setPrNumber(e.target.value)}
                  placeholder="Enter PR number"
                  className="w-full bg-slate-700/50 border border-slate-600/50 rounded-2xl px-5 py-4 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-orange-500/50 focus:border-orange-500/50 transition-all duration-300 backdrop-blur-sm"
                />
              ) : (
                <button
                  onClick={handleScan}
                  disabled={isLoading}
                  className="w-full bg-gradient-to-r from-red-600 via-orange-600 to-amber-600 hover:from-red-700 hover:via-orange-700 hover:to-amber-700 disabled:from-slate-600 disabled:to-slate-600 text-white font-semibold py-4 px-8 rounded-2xl transition-all duration-300 flex items-center justify-center space-x-3 shadow-xl ring-1 ring-white/10 hover:shadow-2xl hover:scale-105 disabled:hover:scale-100"
                >
                  {isLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                      <span>Scanning...</span>
                    </>
                  ) : (
                    <>
                      <Shield className="w-5 h-5" />
                      <span>Start Security Scan</span>
                    </>
                  )}
                </button>
              )}
            </div>
          </div>
          
          {scanMode === 'specific' && (
            <div className="mt-6">
              <button
                onClick={handleScan}
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-red-600 via-orange-600 to-amber-600 hover:from-red-700 hover:via-orange-700 hover:to-amber-700 disabled:from-slate-600 disabled:to-slate-600 text-white font-semibold py-4 px-8 rounded-2xl transition-all duration-300 flex items-center justify-center space-x-3 shadow-xl ring-1 ring-white/10 hover:shadow-2xl hover:scale-105 disabled:hover:scale-100"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                    <span>Scanning PR #{prNumber}...</span>
                  </>
                ) : (
                  <>
                    <Search className="w-5 h-5" />
                    <span>Scan PR #{prNumber}</span>
                  </>
                )}
              </button>
            </div>
          )}
        </div>

        {/* Scans List */}
        <div className="space-y-8">
          {scans.map((scan) => (
            <div key={scan.id} className="bg-slate-800/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 overflow-hidden shadow-2xl ring-1 ring-white/5 hover:ring-white/10 transition-all duration-300">
              {/* Scan Header */}
              <div className="p-8 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-700/30">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-5">
                    <div className="bg-gradient-to-br from-red-500 to-orange-600 p-3 rounded-2xl shadow-lg ring-1 ring-white/10">
                      <Shield className="w-7 h-7 text-white" />
                    </div>
                    <div>
                      <h3 className="text-2xl font-bold text-white mb-2">
                        PR #{scan.prNumber}: {scan.title}
                      </h3>
                      <div className="flex items-center space-x-6 text-sm text-slate-400">
                        <span className="flex items-center space-x-2 bg-slate-700/50 px-3 py-1 rounded-lg">
                          <Clock className="w-4 h-4" />
                          <span>{new Date(scan.timestamp).toLocaleString()}</span>
                        </span>
                        <span className="flex items-center space-x-2 bg-slate-700/50 px-3 py-1 rounded-lg">
                          <FileText className="w-4 h-4" />
                          <span>{scan.files.length} files</span>
                        </span>
                        <span className="flex items-center space-x-2 bg-slate-700/50 px-3 py-1 rounded-lg">
                          <AlertTriangle className="w-4 h-4" />
                          <span>{scan.files.reduce((acc, file) => acc + file.vulnerabilities.length, 0)} issues</span>
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className={`px-4 py-2 rounded-xl text-sm font-semibold border ${getRiskColor(scan.overallRisk)}`}>
                      {scan.overallRisk} Risk
                    </span>
                    <span className="bg-emerald-400/20 text-emerald-400 px-4 py-2 rounded-xl text-sm font-semibold border border-emerald-400/30">
                      {scan.status}
                    </span>
                  </div>
                </div>
              </div>

              {/* Files */}
              <div className="p-8 space-y-6">
                {scan.files.map((file, fileIndex) => (
                  <div key={fileIndex} className="bg-slate-700/30 rounded-2xl p-6 border border-slate-600/30 shadow-lg backdrop-blur-sm">
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center space-x-4">
                        <div className="bg-slate-600/50 p-2 rounded-xl">
                          <Code className="w-6 h-6 text-orange-400" />
                        </div>
                        <span className="font-mono text-orange-300 text-lg">{file.filename}</span>
                        <span className="bg-slate-600/60 text-slate-300 px-3 py-1 rounded-lg text-sm font-medium">
                          {file.linesScanned} lines scanned
                        </span>
                      </div>
                      <div className="flex items-center space-x-3">
                        <span className="text-slate-400 text-sm">Risk Score:</span>
                        <span className={`px-3 py-1 rounded-lg text-sm font-bold ${
                          file.riskScore >= 8 ? 'text-red-400 bg-red-400/10' :
                          file.riskScore >= 6 ? 'text-orange-400 bg-orange-400/10' :
                          file.riskScore >= 4 ? 'text-amber-400 bg-amber-400/10' :
                          'text-emerald-400 bg-emerald-400/10'
                        }`}>
                          {file.riskScore.toFixed(1)}/10
                        </span>
                      </div>
                    </div>

                    {/* Vulnerabilities */}
                    <div className="space-y-4">
                      {file.vulnerabilities.map((vuln, vulnIndex) => (
                        <div key={vulnIndex} className="p-5 bg-slate-800/60 rounded-xl border border-slate-600/30 backdrop-blur-sm">
                          <div className="flex items-start space-x-4">
                            <div className="bg-slate-700/50 p-2 rounded-lg">
                              {getVulnerabilityTypeIcon(vuln.type)}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center space-x-3 mb-3">
                                <span className={`text-xs font-bold uppercase tracking-wider px-2 py-1 rounded-md border ${getSeverityColor(vuln.severity)}`}>
                                  {vuln.severity}
                                </span>
                                <span className="text-slate-300 font-semibold">{vuln.type}</span>
                              </div>
                              <p className="text-slate-300 leading-relaxed mb-4">
                                {vuln.description}
                              </p>
                              {vuln.line && (
                                <div className="bg-slate-900/50 p-3 rounded-lg mb-4 border border-slate-600/30">
                                  <p className="text-xs text-slate-400 mb-1">Vulnerable Code:</p>
                                  <code className="text-red-300 font-mono text-sm">{vuln.line}</code>
                                </div>
                              )}
                              <div className="bg-blue-900/20 p-4 rounded-lg border border-blue-500/30">
                                <div className="flex items-center space-x-2 mb-2">
                                  <CheckCircle className="w-4 h-4 text-blue-400" />
                                  <span className="text-blue-300 font-semibold text-sm">Remediation</span>
                                </div>
                                <p className="text-blue-200 text-sm leading-relaxed">
                                  {vuln.remediation}
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}

          {scans.length === 0 && !isLoading && (
            <div className="text-center py-16">
              <div className="bg-slate-800/50 backdrop-blur-xl rounded-3xl border border-slate-700/50 p-12 shadow-2xl ring-1 ring-white/5">
                <div className="bg-gradient-to-br from-red-500/20 to-orange-500/20 p-6 rounded-3xl w-24 h-24 mx-auto mb-6 flex items-center justify-center">
                  <Shield className="w-12 h-12 text-orange-400" />
                </div>
                <h3 className="text-2xl font-bold text-slate-300 mb-3">No Security Scans Yet</h3>
                <p className="text-slate-400 text-lg">Enter a repository above to start scanning for security vulnerabilities with AI assistance.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityScanner;